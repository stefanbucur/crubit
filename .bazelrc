# use `MODULE.bazel` and `WORKSPACE.bzlmod`, not `WORKSPACE`.
build --enable_bzlmod --enable_workspace

# Reuse the build cache across devcontainer rebuilds.
build --disk_cache=/bazel-cache

# generic_clang from @llvm-raw//utils/bazel, but c++20 to match Google
build:generic_clang --repo_env=CC=clang-20
build:generic_clang --cxxopt=-std=c++20 --host_cxxopt=-std=c++20 --repo_env=BAZEL_CXXOPTS=-std=c++20
build:generic_clang --copt=-Wall --host_copt=-Wall # not -Werror due to spurious warnings differences in Clang <16
build:generic_clang --cxxopt=-Wno-range-loop-analysis --host_cxxopt=-Wno-range-loop-analysis
build:generic_clang --copt=-Wno-deprecated --host_copt=-Wno-deprecated
# https://buildkite.com/bazel/crubit-presubmit/builds/289#018b0116-2039-4c89-b211-c0b25b7432f2/445-473
build:generic_clang --copt=-Wno-missing-braces --host_copt=-Wno-missing-braces

# enable linking against prebuilt LLVM with no RTTI
build:generic_clang --copt=-fno-rtti --host_copt=-fno-rtti

# Somehow this is needed, according to the README.md!
build:generic-clang --linkopt=-fuse-ld=/usr/bin/ld.lld-20

build --config=generic_clang
build --@rules_rust//rust/toolchain/channel=nightly

# Directly invoke the Crubit aspects by name when running `build`, and get the generated files.
build:crubit-genfiles --aspects=//rs_bindings_from_cc/bazel_support:rust_bindings_from_cc_aspect.bzl%rust_bindings_from_cc_aspect,//cc_bindings_from_rs/bazel_support:cc_bindings_from_rust_rule.bzl%cc_bindings_from_rust_aspect --output_groups=out
